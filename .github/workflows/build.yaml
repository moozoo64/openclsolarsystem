name: CI

on:
  workflow_dispatch: # allows manual triggering
    inputs:
      create_release:
        description: 'Create new release'
        required: true
        type: boolean
  push:
    branches:
      - master
    paths: ['.github/workflows/build.yaml', '**/CMakeLists.txt', '**/Makefile', '**/*.h', '**/*.hpp', '**/*.c', '**/*.cpp', '**/*.cl', '**/*.cs', '**/*.sln', '**/*.csproj', '**/appsettings.json']
  pull_request:
    types: [opened, synchronize, reopened]
    paths: ['.github/workflows/build.yaml', '**/CMakeLists.txt', '**/Makefile', '**/*.h', '**/*.hpp', '**/*.c', '**/*.cpp', '**/*.cl', '**/*.cs', '**/*.sln', '**/*.csproj', '**/appsettings.json']

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref && github.ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: write # for creating release
env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  RELEASE_VERSION: ${{ github.event.inputs.create_release && github.run_number }}
  SHOULD_RELEASE: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/master') || github.event.inputs.create_release == 'true' }}
  SHOULD_UPLOAD_ARTIFACT: ${{ github.ref == 'refs/heads/develop' && github.event.inputs.create_release == 'true' }}
  BUILD_DATE: ${{ format('YYYY-MM-DD') }}

jobs:
  windows-msys2:
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - { sys: UCRT64,  env: ucrt-x86_64,  build: Release }
          - { sys: CLANG64, env: clang-x86_64, build: Release }

    steps:
      - name: Clone
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup dotnet 
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x.x'

      - name: Setup ${{ matrix.sys }}
        uses: msys2/setup-msys2@v2
        with:
          update: true
          location: C:\msys64
          release: false
          msystem: ${{matrix.sys}}
          install: >-
            base-devel
            git
            zip
            mingw-w64-${{matrix.env}}-gcc
            mingw-w64-${{matrix.env}}-gdb
            mingw-w64-${{matrix.env}}-toolchain
            mingw-w64-${{matrix.env}}-glew
            mingw-w64-${{matrix.env}}-cmake
            mingw-w64-${{matrix.env}}-opencl-headers
            mingw-w64-${{matrix.env}}-opencl-icd
            mingw-w64-${{matrix.env}}-wxwidgets3.2-common
            mingw-w64-${{matrix.env}}-wxwidgets3.2-msw
            mingw-w64-${{matrix.env}}-wxwidgets3.2-msw-cb_headers

      - name: Build OpenCLSolarSystem using Makefile
        shell: msys2 {0}
        run: |
          cd src/OpenCLSolarSystem
          mingw32-make -j8 BUILD_TYPE=Release ARCH=x64 clean
          mingw32-make -j8 BUILD_TYPE=Release ARCH=x64  

      - name: Build OrbToSlf using dotnet
        run: |
          cd src/OrbToSlf
          dotnet build --configuration Release --framework net8.0

      - name: Determine tag name
        id: tag
        shell: msys2 {0}
        run: |
          BUILD_NUMBER="$(git rev-list --count HEAD)"
          SHORT_HASH="$(git rev-parse --short=7 HEAD)"
          if [[ "${{ env.BRANCH_NAME }}" == "master" ]]; then
            echo "name=b${BUILD_NUMBER}" >> $GITHUB_OUTPUT
          else
            SAFE_NAME=$(echo "${{ env.BRANCH_NAME }}" | tr '/' '-')
            echo "name=${SAFE_NAME}-b${BUILD_NUMBER}-${SHORT_HASH}" >> $GITHUB_OUTPUT
          fi

      - name: Debug git info
        shell: msys2 {0}
        run: |
          echo "Total commits: $(git rev-list --count HEAD)"
          echo "Current tag: ${{ steps.tag.outputs.name }}"
          echo "Current branch: ${{ env.BRANCH_NAME }}"
          echo "Git hash: $(git rev-parse --short=7 HEAD)"

      - name: Pack artifacts
        id: pack_artifacts
        if: ${{ env.SHOULD_RELEASE == 'true' || env.SHOULD_UPLOAD_ARTIFACT == 'true' }}
        run: |
          mkdir -p ./src/OpenCLSolarSystem/Release_x64/OrbToSlf       
          Copy-Item ./licenses ./src/OpenCLSolarSystem/Release_x64/ -Recurse
          Copy-Item ./README.md ./src/OpenCLSolarSystem/Release_x64/
          Copy-Item ./license.txt ./src/OpenCLSolarSystem/Release_x64/
          Copy-Item ./src/OrbToSlf/OrbToSlfConsole/bin/Release/net8.0/* ./src/OpenCLSolarSystem/Release_x64/OrbToSlf/ -Recurse
          7z a OpenClSolarSystem-${{ steps.tag.outputs.name }}-${{matrix.env}}-${{ matrix.build }}.zip ./src/OpenCLSolarSystem/Release_x64/*
          # Generate checksums
          $hash = Get-FileHash -Algorithm SHA256 OpenClSolarSystem-${{ steps.tag.outputs.name }}-${{matrix.env}}-${{ matrix.build }}.zip
          $hash.Hash | Out-File -FilePath OpenClSolarSystem-${{ steps.tag.outputs.name }}-${{matrix.env}}-${{ matrix.build }}.sha256

      - name: Upload artifacts
        if: ${{ env.SHOULD_RELEASE == 'true' || env.SHOULD_UPLOAD_ARTIFACT == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          path: OpenClSolarSystem-${{ steps.tag.outputs.name }}-${{matrix.env}}-${{ matrix.build }}.zip
          name: OpenClSolarSystem-${{ steps.tag.outputs.name }}-${{matrix.env}}-${{ matrix.build }}.zip

      - name: Upload artifacts Checksum
        if: ${{ env.SHOULD_RELEASE == 'true' || env.SHOULD_UPLOAD_ARTIFACT == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          path: OpenClSolarSystem-${{ steps.tag.outputs.name }}-${{matrix.env}}-${{ matrix.build }}.sha256
          name: OpenClSolarSystem-${{ steps.tag.outputs.name }}-${{matrix.env}}-${{ matrix.build }}.sha256

      # - name: Build using CMake
      #   shell: msys2 {0}
      #   run: |
      #       cmake -B build
      #       cmake --build build --config ${{ matrix.build }} -j $(nproc)

      # - name: Clean after building using CMake
      #   shell: msys2 {0}
      #   run: |
      #       rm -rf build

    outputs:
      tag_name: ${{ steps.tag.outputs.name }}

  create-release:
    needs: windows-msys2
    if: |
      always() &&
      needs.windows-msys2.result == 'success' &&
      needs.windows-msys2.outputs.tag_name != '' &&
      ((github.event_name == 'push' && github.ref == 'refs/heads/master') || (github.ref == 'refs/heads/master' && github.event.inputs.create_release == 'true'))
    runs-on: windows-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: OpenClSolarSystem-*
          path: artifacts
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            artifacts/**/OpenClSolarSystem-*.zip
            artifacts/**/OpenClSolarSystem-*.sha256
          tag_name: ${{ needs.windows-msys2.outputs.tag_name }}
          name: Release ${{ needs.windows-msys2.outputs.tag_name }}
          body: |
            ## OpenCLSolarSystem Release ${{ needs.windows-msys2.outputs.tag_name }}
            
            ### Build Information
            - Version: ${{ needs.windows-msys2.outputs.tag_name }}
            - Commit: ${{ github.sha }}
             Build Date: ${{ env.BUILD_DATE }}
            
            ### Available Builds
            - UCRT64 (x86_64)
            - CLANG64 (x86_64)
            
            ### Installation
            1. Download the zip file for your preferred build
            2. Verify the SHA256 checksum
            3. Extract and run OpenCLSolarSystem.exe
            
            ### SHA256 Verification
            ```powershell
            Get-FileHash OpenClSolarSystem-*.zip -Algorithm SHA256
            ```
